Project File Structure:
./
    .gitignore
    app.py
    config.py
    models.py
    project_structure.txt
    __init__.py
    instance/
        recipes.db
    static/
        dynamic_fields.js
        style.css
    templates/
        index.html
        search.html
        search_results.html

Contents of .py and .html Files:

File: .\app.py

from flask import render_template, request
from config import app, db
from models import Recipe, Ingredient
from flask import jsonify

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search', methods=['GET', 'POST'])
def search():
    if request.method == 'POST':
        ingredients = [i for i in request.form.getlist('ingredient') if i]  # Filter out empty strings
        recipes = Recipe.query.join(Recipe.ingredients).filter(Ingredient.name.in_(ingredients)).group_by(Recipe.id).having(db.func.count(Recipe.id) == len(ingredients)).all()
        return render_template('search_results.html', recipes=recipes, ingredients=ingredients)
    return render_template('search.html')

@app.route('/ingredient-suggestions')
def ingredient_suggestions():
    query = request.args.get('q', '')
    if query:
        ingredient_list = Ingredient.query.with_entities(Ingredient.name).filter(Ingredient.name.startswith(query)).distinct().all()
        suggestions = [ingredient.name for ingredient in ingredient_list]
    else:
        suggestions = []
    return jsonify(suggestions)

if __name__ == '__main__':
    app.run(debug=True)


File: .\config.py

from flask import Flask
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///recipes.db'
db = SQLAlchemy(app)


File: .\models.py

from config import db

class Recipe(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(50))
    ingredients = db.relationship('Ingredient', backref='recipe', lazy=True)
    steps = db.relationship('RecipeStep', backref='recipe', lazy=True)

class Ingredient(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    amount = db.Column(db.String(50))
    recipe_id = db.Column(db.Integer, db.ForeignKey('recipe.id'), nullable=False)

class RecipeStep(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    step = db.Column(db.Text, nullable=False)
    recipe_id = db.Column(db.Integer, db.ForeignKey('recipe.id'), nullable=False)



File: .\__init__.py

from app import app
from models import db

with app.app_context():
    db.create_all()


File: .\templates\index.html

<!DOCTYPE html>
<html>
<head>
    <title>Recipe Matcher</title>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Welcome to Recipe Matcher</h1>
        <a href="/search" class="btn">Search Recipes</a>
    </div>
</body>
</html>



File: .\templates\search.html

<!DOCTYPE html>
<html>
<head>
    <title>Recipe Search</title>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style.css') }}">
    <script src="{{ url_for('static', filename='dynamic_fields.js') }}"></script>
</head>
<body>
    <div class="container">
        <h1>Recipe Search</h1>
        <form action="/search" method="post" id="searchForm">
            <div id="ingredientFields">
                <div class="ingredientField">
                    <label>Ingredient:</label>
                    <input type="text" name="ingredient" class="ingredientInput" autocomplete="off">
                </div>
            </div>
            <button type="button" id="addIngredientBtn" class="btn">Add Another Ingredient</button>
            <input type="submit" value="Search" class="btn">
        </form>
    </div>
</body>
</html>



File: .\templates\search_results.html

<!DOCTYPE html>
<html>
<head>
    <title>Search Results</title>
</head>
<body>
    <h1>Search Results</h1>
    {% if recipes %}
        <ul>
            {% for recipe in recipes %}
                <li>{{ recipe.name }} - Ingredients:
                    {% for ingredient in recipe.ingredients %}
                        {{ ingredient.name }} ({{ ingredient.amount }}),
                    {% endfor %}
                    - Steps:
                    {% for step in recipe.steps %}
                        {{ step.step }};
                    {% endfor %}
                </li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No recipes found.</p>
    {% endif %}
    <a href="/">Back to search</a>
</body>
</html>

